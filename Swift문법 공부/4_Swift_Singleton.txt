## 접근 제어(Access Control) 가  필요한 이유?

- 애플이 자신들이 원하는 코드를 감출수 있음 (은닉화)
- private으로 선언된 속성 / 매서에 접근 불가 하므로 코드 내부의 세부 구현 내용을 숨기는 것이 가능 (은닉화)
- 코드의 영역을 분리시켜서 , 효율적 관리 가능
- 컴파일 시간이 줄어듬
    - (컴파일러가 , 해당 변수가 어느 범위에서만 쓰이는지를 인지 가능)



### 싱글톤 (Singleton) 패턴

> 메모리상에 유일하게 1개만 존재하는 객체 설계

`static let shared = Singleton()`

`private init() {}`

### 싱글톤 패턴이 필요한 이유

- 앱 구현 시, 유일하게 한개만 존재하는 객체가 필요한 경우
    
    → 특정한 유일한 데이터 / 관리 객체가 필요한 경우
    
- 한번 생성된 이후, **앱이 종료될 때까지 유일한 객체로 메모리에 상주**

💡 변수로 접근하는 순간 `lazy` 하게 동작하여, 메모리 (데이터 영역) 에 올라간다.

class Singleton {
    // 타입 프로퍼티(전역변수)로 선언
    static let shared = Singleton()      // 자신의 객체를 생성해서 전역변수에 할당
    var userInfoId = 12345
    private init() {}
}

### 실제 사용 예시
let screen = UIScreen.main    // 화면
let userDefaults = UserDefaults.standard    // 한번생성된 후, 계속 메모리에 남음!!!
let application = UIApplication.shared   // 앱
let fileManager = FileManager.default    // 파일
let notification = NotificationCenter.default